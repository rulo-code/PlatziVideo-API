Profesor

Guillermo rodas

Segundo round

Express fue inspirado en sinatra que esta escrito en Ruby
  es muy minimalista
  Middlewares

Vamos a construir el backend de PlatVideos

1. Lo primero que hacemos en es agregar nuestros script en el package.json

  "scripts": {
    "dev": "DEBUG=app* nodemon index",
    "start": "NODE_ENV=production node index"
  },

  DEBUG=app*: La variable de entorno va a imprimir todo lo que tenga
  de la aplicación, usaremos nodemon
  NODE_ENV=production: Vamos a habilitar el modo production ejecutando node normalmente

2. Configuramos eslint para entorno node
  {
    "parserOptions": {
      "ecmaVersion": 2018
    },
    "extends": ["eslint:recommended", "prettier"],
    "env": {
      "es6": true,
      "node": true,
      "mocha": true
    },
    "rules": {
      "no-console": "warn"
    }
  }
3. Configuramos Prettier, para formatear nuestro codigo
  {
    "tabWidth": 2,
    "semi": true,
    "singleQuote": true
  }

4. Intalamos nuestros dependencias core
  $ npm i express dotenv

5. Instalamos las dependencias dev
  $ npm i -D nodemon eslint eslint-config-prettier eslint-plugin-prettier prettier

6. Cada vez que se haga con commit vamos a hacer un fix del código
  $ npx mrm lint-staged
7. Creamos nuestro archivo de configuración 
8. Creamos nuestro servidor de express

REUEST OBJECT
  El objeto req (Request) en 
  Express representa el llamado
  HTTP y tiene diferentes propiedades
  del llamado, como la cadena de texto
  query (Query params), los parámetros
  de la URL (URL params), el cuerpo (Body),
  los encabezados (HTTP headers), etc.

  req.body:
    Contiene los pares de llave-valor de los datos
    enviados en el cuerpo (body) del llamado (request).
    Por defecto es undefined pero es establecido cuando
    se usa algún “body-parser” middleware como body-parser y multer.

  req.params:

    Esta propiedad contiene un objeto con las propiedades equivalentes
    a los parámetros nombrados en la ruta. Por ejemplo, si tenemos una ruta
    de la forma /user/:name , entonces la propiedad name está disponible como
    req.params.name, si llamamos a la ruta /user/rulos el valor de 
    req.params.name será rulos
      // GET /user/rulos
        req.params.name;
      // => "rulos"

  req.query:

    Esta propiedad contiene un objeto con las propiedades equivalentes a las cadenas de texto
    query de la ruta. Si no hay ninguna cadena de texto query tendrá como valor
    por defecto un objeto vacío {}

RESPONSE OBJECT
  Representa la respuesta HTTP que envía una aplicación en Express
  Para acceder al res basta con acceder al segundo parámetro de nuestros router heandlers

    app.get("/user/:id", function(req, res) {
      res.send("user " + req.params.id);
    });
  
  Métodos mas comunes
    res.end():
      Finaliza el proceso de respuesto. Este método viene realmente del core de node
      Se usa para finalizar el request rápidamente sin ningún dato. 
        res.end();
        res.status(404).end();
    
    res.json():

      Convierte el parámetro enviado a una cadena de texto JSON usando JSON.stringify()
      El parámetro puede ser cualquier tipo de JSON, incluido un objeto, un arreglo, una cadena de texto, un boolean, número, null y también puede ser usado para convertir otros valores a JSON.

        res.json(null);
        res.json({ user: "tobi" });
        res.status(500).json({ error: "message" });

    res.send():
      Envía una respuesta HTTP. El parámetro body puede un objeto, una cadena, un objeto
      o un arreglo
        res.send(Buffer.from("whoop"));
        res.send({ some: "json" });
        res.send("<p>some html</p>");
        res.status(404).send("Sorry, we cannot find that!");
        res.status(500).send({ error: "something blew up" });

Anatomia de una API restful
  Rest( Representational State Transfer) es un estilo de 
  arquitectura para construir web services, no es un estándar pero 
  si una especificación muy usada

  Las peticiones HTTP van acompaladas de un "verbo" que define
  el tipo de petición:
    GET. Lectura de datos.
    PUT. Reemplazar datos.
    PATCH. Actualizar datos en un recurso específico.
    POST. Creación de datos.
    DELETE. Eliminación de datos.

9. Implementando un CRUD en Express.js
  Las siglas CRUD vienen de las palabras en inglés:

    Create - crear
    Read - leer
    Update - actualizar
    Delete - eliminar
10. Implementando una capa de servicios:
  La capa de servicio lo que nos a va a permitir es manejar
  la logica de nuestro negocio y saber el comportamiento de 
  los datos, esta se va a comunicar con la capa de rutas

  para eso tenemos que crear una nueva instancia de la clase
  services  
    const moviesService = new MoviesService();
  luego podemos usar los metodos creados
    const movies = await moviesService.getMovies({ tags });

¿Cómo conectarse a servicio externos en express js
  en esta ocación vamos a usar mongo atlas

  La URI de MongoDB tiene esta estructura
  mongodb+srv://DB_USER:DB_PASSWORD@DB_HOST/DB_NAME

  Todo esto lo vamosa  representar en variables de entorno
  para que luego sea muy facíl cambiar de ambiente

  El acceso de red es la primera capa de seguridad que tenemos, y una muy importante
  lo que se debe hacer cuando estamos en producción es determinar
  cual es la id de la maquina que esta en producción, para que 
  solo esa ip tenga acceso

  Pero como estamos hablando de desarrollo, nosotros vamos
  ha permitir que cualquier ip se conecte a nuestra base de datos
  de todas formar contaremos con un usuario y contraseña 
  que debera ser un parametro de conección más adelante

  Clusters
    Se componend de tres o más instancias de mongodb,
    esto hace que tengamos alta disponibilidad a diferencia de 
    otro servicios

11. Conexión a MongoAtlas una instancia de MongoDB
  Lo primero es instalar:
    $ npm i mongodb
  Luego creamos dos archivos super importantetes:
    .env.example .env
  teniendo claro que el .example será el que irá a parar al repositorio
  y será la instrucción para cualquier otro desarrollador
  En archivo .env no debe eser expuesto

    //CONFIG
    PORT=3000
    CORS=*

    //MONGO
    DB_USER=
    DR_PASSWORD=
    DB_HOST=
    DB_NAME=
12. Alimentar archivo de configuración con variables de entorno
  TRUCO: Agregar cursor al final de la linea
    alt + shift + i

    Creacmos una carpeta llamada lib que va a contener la Conexión
    con mongo 

    Metenemos que encodificar nuestras varibles para evitar errores de
    interpretación
      const PASSWORD = encodeURIComponent(config.dbPassword);

    Ahora creamos nuestro URI
      const MONGO_URI = `mongodb+srv://${USER}:${PASSWORD}@${config.dsHost}:${config.port}/${DB_NAME}?retryWrites=true&w=majority`

    Seguido a esto vamos a crear una clase con la conección
      class MongoLib {
           
      }
    
    En la conección vamos a utilizar un patron que se llama singleton
      Singleton: 
        consiste en que cada vez que nos conectemos a nuestra base de datos
        no nos cree un nuevo cliente, si no que si el cliente ya existe use la conección 
        existente
    