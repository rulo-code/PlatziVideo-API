Profesor

Guillermo rodas

Segundo round

Express fue inspirado en sinatra que esta escrito en Ruby
  es muy minimalista
  Middlewares

Vamos a construir el backend de PlatVideos

1. Lo primero que hacemos en es agregar nuestros script en el package.json

  "scripts": {
    "dev": "DEBUG=app* nodemon index",
    "start": "NODE_ENV=production node index"
  },

  DEBUG=app*: La variable de entorno va a imprimir todo lo que tenga
  de la aplicación, usaremos nodemon
  NODE_ENV=production: Vamos a habilitar el modo production ejecutando node normalmente

2. Configuramos eslint para entorno node
  {
    "parserOptions": {
      "ecmaVersion": 2018
    },
    "extends": ["eslint:recommended", "prettier"],
    "env": {
      "es6": true,
      "node": true,
      "mocha": true
    },
    "rules": {
      "no-console": "warn"
    }
  }
3. Configuramos Prettier, para formatear nuestro codigo
  {
    "tabWidth": 2,
    "semi": true,
    "singleQuote": true
  }

4. Intalamos nuestros dependencias core
  $ npm i express dotenv

5. Instalamos las dependencias dev
  $ npm i -D nodemon eslint eslint-config-prettier eslint-plugin-prettier prettier

6. Cada vez que se haga con commit vamos a hacer un fix del código
  $ npx mrm lint-staged
7. Creamos nuestro archivo de configuración 
8. Creamos nuestro servidor de express

REUEST OBJECT
  El objeto req (Request) en 
  Express representa el llamado
  HTTP y tiene diferentes propiedades
  del llamado, como la cadena de texto
  query (Query params), los parámetros
  de la URL (URL params), el cuerpo (Body),
  los encabezados (HTTP headers), etc.

  req.body:
    Contiene los pares de llave-valor de los datos
    enviados en el cuerpo (body) del llamado (request).
    Por defecto es undefined pero es establecido cuando
    se usa algún “body-parser” middleware como body-parser y multer.

  req.params:

    Esta propiedad contiene un objeto con las propiedades equivalentes
    a los parámetros nombrados en la ruta. Por ejemplo, si tenemos una ruta
    de la forma /user/:name , entonces la propiedad name está disponible como
    req.params.name, si llamamos a la ruta /user/rulos el valor de 
    req.params.name será rulos
      // GET /user/rulos
        req.params.name;
      // => "rulos"

  req.query:

    Esta propiedad contiene un objeto con las propiedades equivalentes a las cadenas de texto
    query de la ruta. Si no hay ninguna cadena de texto query tendrá como valor
    por defecto un objeto vacío {}

RESPONSE OBJECT
  Representa la respuesta HTTP que envía una aplicación en Express
  Para acceder al res basta con acceder al segundo parámetro de nuestros router heandlers

    app.get("/user/:id", function(req, res) {
      res.send("user " + req.params.id);
    });
  
  Métodos mas comunes
    res.end():
      Finaliza el proceso de respuesto. Este método viene realmente del core de node
      Se usa para finalizar el request rápidamente sin ningún dato. 
        res.end();
        res.status(404).end();
    
    res.json():

      Convierte el parámetro enviado a una cadena de texto JSON usando JSON.stringify()
      El parámetro puede ser cualquier tipo de JSON, incluido un objeto, un arreglo, una cadena de texto, un boolean, número, null y también puede ser usado para convertir otros valores a JSON.

        res.json(null);
        res.json({ user: "tobi" });
        res.status(500).json({ error: "message" });

    res.send():
      Envía una respuesta HTTP. El parámetro body puede un objeto, una cadena, un objeto
      o un arreglo
        res.send(Buffer.from("whoop"));
        res.send({ some: "json" });
        res.send("<p>some html</p>");
        res.status(404).send("Sorry, we cannot find that!");
        res.status(500).send({ error: "something blew up" });

Anatomia de una API restful
  Rest( Representational State Transfer) es un estilo de 
  arquitectura para construir web services, no es un estándar pero 
  si una especificación muy usada

  Las peticiones HTTP van acompaladas de un "verbo" que define
  el tipo de petición:
    GET. Lectura de datos.
    PUT. Reemplazar datos.
    PATCH. Actualizar datos en un recurso específico.
    POST. Creación de datos.
    DELETE. Eliminación de datos.

9. Implementando un CRUD en Express.js
  Las siglas CRUD vienen de las palabras en inglés:

    Create - crear
    Read - leer
    Update - actualizar
    Delete - eliminar
10. Implementando una capa de servicios:
  La capa de servicio lo que nos a va a permitir es manejar
  la logica de nuestro negocio y saber el comportamiento de 
  los datos, esta se va a comunicar con la capa de rutas

  para eso tenemos que crear una nueva instancia de la clase
  services  
    const moviesService = new MoviesService();
  luego podemos usar los metodos creados
    const movies = await moviesService.getMovies({ tags });

¿Cómo conectarse a servicio externos en express js
  en esta ocación vamos a usar mongo atlas

  La URI de MongoDB tiene esta estructura
  mongodb+srv://DB_USER:DB_PASSWORD@DB_HOST/DB_NAME

  Todo esto lo vamosa  representar en variables de entorno
  para que luego sea muy facíl cambiar de ambiente

  El acceso de red es la primera capa de seguridad que tenemos, y una muy importante
  lo que se debe hacer cuando estamos en producción es determinar
  cual es la id de la maquina que esta en producción, para que 
  solo esa ip tenga acceso

  Pero como estamos hablando de desarrollo, nosotros vamos
  ha permitir que cualquier ip se conecte a nuestra base de datos
  de todas formar contaremos con un usuario y contraseña 
  que debera ser un parametro de conección más adelante

  Clusters
    Se componend de tres o más instancias de mongodb,
    esto hace que tengamos alta disponibilidad a diferencia de 
    otro servicios

11. Conexión a MongoAtlas una instancia de MongoDB
  Lo primero es instalar:
    $ npm i mongodb
  Luego creamos dos archivos super importantetes:
    .env.example .env
  teniendo claro que el .example será el que irá a parar al repositorio
  y será la instrucción para cualquier otro desarrollador
  En archivo .env no debe eser expuesto

    //CONFIG
    PORT=3000
    CORS=*

    //MONGO
    DB_USER=
    DR_PASSWORD=
    DB_HOST=
    DB_NAME=
12. Alimentar archivo de configuración con variables de entorno
  TRUCO: Agregar cursor al final de la linea
    alt + shift + i

    Creacmos una carpeta llamada lib que va a contener la Conexión
    con mongo 

    Metenemos que encodificar nuestras varibles para evitar errores de
    interpretación
      const PASSWORD = encodeURIComponent(config.dbPassword);

    Ahora creamos nuestro URI
      const MONGO_URI = `mongodb+srv://${USER}:${PASSWORD}@${config.dsHost}:${config.port}/${DB_NAME}?retryWrites=true&w=majority`

    Seguido a esto vamos a crear una clase con la conección
      class MongoLib {
           
      }
    
    En la conección vamos a utilizar un patron que se llama singleton
      Singleton: 
        consiste en que cada vez que nos conectemos a nuestra base de datos
        no nos cree un nuevo cliente, si no que si el cliente ya existe use la conección 
        existente.
  
13. Implementando acciones de mongo
  Las accciones practicamente son el CRUD en mongo
    Read
      .find(query,projection)
      .findOne(query, projection)
    
    Create
      .inserOne(document, options)
    
    Update
      .updateOne(filter,udtate,options)
    
    Delete
      .deleOne(filter, options)

  Estos metodos retornan la conección a mongo, con una instancia a la 
  base de datos y esa instancia tiene los metodos de mongo

    getAll(collection, query) {
      return this.connect().then(db =>{
        return db.collection(collection).find(query).toArray()
      })
    }
  
  tenemos que retornar entonces la coleccón con la busqueda hecha
  convertida a un array

  Ahora podemos cambiar nuestros mocks por la información de nuestra DB_HOST

14. Coneción de nuestros servicios con Mongo
  Quitamos los mocks y agregamos un constructor a la clase services
    constructor() {
      this.collection = 'movies';
      this.mongoDB = new Mongolib()
    }

    async getMovies({ tags }) {
      const query = tags && { tags: {$in: tags} }
      const movies = await this.mongoDB.getAll(this.collection, query);
      return movies || [];
    }

  En este punto ya tenemos conección con nuestra base de datos, pero 
  necesitamos usar un bodyparcer para poder enviar datos nuevos a nuestra
  colección.

15. Agrando middleware para interpretar JSON
  Para hacer esto vamos a nuestro index y agragamos esto
    app.use(express.json());
  Que lo que va a permiter es saber interpretar datos JSON

Hasta ahora podemos: 
  Usar Mongo atlas para conectarse a una instancia de MongoDB
  Crear una interfaz para nuestras acciones
  Implementar acciones de MongoDB

16. Middlewares
  Es una pieza de softwate que esta en medio de otra, se le suele
  describir como pegamento de software
  Para utilizarlos en node podemos:
    function(req,res,next) {
      next()
    }
  Para pasar al siguiente middleware vamos a ejecutar next.

  Así vamos a crear toda una capa de manejo de errores usando middleares

  Los middleware de error tienen un paramettro adicional
    function errorHandle(err, res, res, next) {
      res.status(err.status || 500)
      res.jso({error: err})
    }
17. Creación de capa de manejo de errores
  Creamos en utils una carpeta llamada middleware
  dependiento del entorno en el que estemos tenemos que 
  mostar o no el detalle del error

  Por defecto los errores se muestran en un formato HTML,
  pero como estamos implementado una API lo más
  recomendable es que sea en formato JSON

  Los middleware siempre deben ir despues de las rutas

  Para errores que se retornan desde funciones asíncronas 
  invocadas desde un manejador de ruta o un middleware, 
  es necesario pasar el error como argumento a la función next(), 
  de esta manera Express capturará el error y lo procesará.

    app.get("/", function(req, res, next) {
      setTimeout(function() {
        try {
          throw new Error("BROKEN");
        } catch (err) {
          next(err);
        }
      }, 100);
    });
  Cuando se usan funciones que retornan promesas,
  puedes simplemente proveer la funcionalidad next al final del manejador
  catch de la promesa y Express automáticamente capturará el error. Por ejemplo:
    app.get("/", function(req, res, next) {
      Promise.resolve()
        .then(function() {
          throw new Error("BROKEN");
        })
        .catch(next); // Errores serán pasados a Express.
    });

18. Creacion de capa de validación de datos usando un middleware
  tenemos que tener muy claro que datos reciben nuestro endpoints
  Para eso podemos expecificar schemas de datos que tengan que cumplirse
  para que todo funcione bien

  Para eso vamos a crear una funcionalidad llamada
  validationHandler, el cual va a recibir un schema
  y donde se va a usar ese schema

  creamos otro middleware llamdo validationHandler
    function validate() {
      return false;
    }

    function validationHandler(schema, check ="body") {
      return (req, res, next) => {
        const error = validate(req[check], schema);

        error ? next(new Error(error)) : next()
      }
    }

QUÉ ES JOI Y BOOM ?
  joi: Object Schema validation, sirve para validad que los datos
  que recibimos vengan en el formato adecuado

  boomÑ HTTP-friendly error objects, nos ayuda a imprimir errores
  comunes en peticiones HTTP de forma sencilla

19. Implementando Boom para manejo de errores
  Instalamos boom
    $ npm i @hapi/boom
  hacemos un split operator a el error, porque ahora va a contener más cositas
    return {...error, stack}
  Cramos un nuevo middleware
    function wrapErrors(err, req, res, next) {

    }
  es posible que algún error no llegué en formato boom, así 
  que a partir de este middleware vamos a encapsular todos los errores 
  en formato boom
    function wrapErrors(err, req, res, next) {
      if(!err.isBoom) {
        next(boom.badImplementation(err)) // manera de marcar errores de boom
      }
      next(err)
    }

  El errr de not found es improtante tambien, para eso vamos a crear
  un middleware que no necesita next pues será el último middleware 
  ejecutado en el server
    

20. Implementando Joi para validación de datos
  $ npm i @hapi/joi
  
  Vamor a implementar de manera muy sencilla nuestra validación 
  con joi, que sólo retornará un error si la validación falla
    function validate(data, schema) {
      const { error } = joi.validate(data, schema)
      return error;
    }
  
  La parte "complicada" es crear el schema de nuestros datos

  creamos utils/schemas
    creamos un schema de creación y otro de actulización dado que
    cuando actualizamos no todos los campos son requeridos

    para el id de nuestra pelicula necesitamso general una expresion regular
    para validar que es un id de mongo validation

      const movieIdSchema = joi.string().regex(/^[0-9a-fA-F]{24}$/);

      const movieIdSchema = {

      }
      const createMovieSchema = {

      }

      const updateMovieSchema = {
        
      }

    Una vez tenemos definidos nuestros schemas, vamos a importarlos 
    dentro de las rutas

    tambien debemos requerir nuestro validationHandler
    por defecto nuestro handler va a sacar los datos del body, pero 
    eso tiene que cambiar para validar un id que nos viene desde params

     validationHandler({ movieId: movieIdSchema}, 'params')

     este middleware irá entonces entra la ruta y la definición de la ruta
      router.post('/',validationHandler(createMovieSchema), async function(req, res, next)
  
    Resumen del modulo:
      Middlewares
      Manejo de errores
      validación de datos
      boom y  joi

21. Creación de test
  La primera suit de test la vamos a implementar en nuestras rutas
  su unica responsabilidad de test, es probar que obtiene y regresa
  los datos correspondientes

  Intalamos las dependencias para los tests
    $ npm i -D mocha supertest sinon proxyquire
      mocha: nos ayuda a correr nuestros test
      supertest: crea un servidor de pruebas
      sinon: nos ayuda a hacer mocks apra tets
      proxyquire: inyectar los mocks cuando requiramos los paquetes
  
  Vamo a modificar nuestros mocks, para agregarles una utilidad
  de filtrado.

  Cómo nuestro objetivo es sólo testear las rutas, no vamos a llegar
  a nuestros servicios, por eso tenemos que usar nuestros mocks como services

  Lo siguiente es crear un servidor de pruebas dentro de utils

  En nuestros test lo primero es obtener
    const assert = require('assert');
  Para hacer la verificación de nuestros test


Passport
  Vamos a implementar autorización y autenticación con Passport
  para eso lo primo es crear el schema de usuarios
    const createUserSchema = {
      name: joi.string().max(100).required(),
      email: joi.string().email().required(),
      password: joi().string().require(),
      isAdmin: joi.boolean()
    }

  ya teniendo nuestro schema podemos crear nuestro service
  en donde vamso a requerir nuestros metodos de mongo, 
  tambien necesitamos instalar bcrypt para poteger nuestras contraseñas
    $ npm i bcrypt
  Creamos nuestra clase y agregamos en el cosntructor tando la 
  instancian de la libreria como el nombre de la colección con la que queremos jugar
    constructor() {
      this.collection = 'users';
      this.mongoDB = new MongoLib();
    }
  La manera de indentificar a un usuario en base de datos será atravez de su email

  Nuestro servicio para crear usuario recibirá los datos de un nuevo usuario e incriptará 
  su contraseña
    async createUser({ user}) {
      const { name, email, password} = user;
      const hashedPassword = await bcrypt.hash(password, 10 );
    }


  Agregando la colección de películas de usuario
    vamos a agregar el schema, la ruta y el servicio de las pelicuals del usuario

    Esto nos permitirá que cuando un usuario autentique y agrege una pelicula a su lista de favoritos
    lo puede ver en la aplicación

    Agregamos el schema del  userMovies, este va a contener los schemas de user y movieIdSchema
    los cuales serán parte del createUserSchema
      userId
      MovieId

    En nuestro servicio vamos a usar nuestros metodos de mongpo
      async getUserMovies({ userId }){
        const query = userId && { userId};
passport-jwt
        return userMovies || []
      }

    Una vez creado el schema, las rutas y los servicios
    nos disponemos a crear los methos de POST y DELETE
    

Configuración de passport
  $ npm i passport jsonwebtoken passport-http passport-jwt
    jsonwebtoken: para poder hacer uso de nuestro JWT
    passport-http: implementar la estrategia basic de passport
    passport-jwt: implementar la estrategia JWT
  $ npm i -D chalk
    Permite pintar colores en la terminal
  
  Vamos a agregar en nuestro .env y .env.example las siguientes variables de entorno

  DEFAULT_ADMIN_PASSWORD= //para definir la clave des administrador
  DEFAULT_USER_PASSWORD=

  Lo siguiente es definir el secret que usaremos para firmar nuestro JWT
  necesitamos crear un key de 256 bits
    WEP 256-bit Key
    https://keygen.io/

  Otra cosa que vamos a defirnir es cuales van a ser nuestras 
  API keys
  Las API keys son lo que nos permiten definir los permisos correspondientes
  cuando haya un login con alguno de nuestros clientes
  a travez del render server o nuestro admin client

  estos api key van a ser generados aleatoriamente mediante nuestros scripts

  Creación de script: un script lo podemos correr para generar registro dentro de 
  nuestra base de datos de manera rápida
    seedUsers.js : crear usuarios
    seedMovies.js : crear movies
    seedApiKeys.js : crear permisos de API
  
Estrategias de autenticación:
  Sirven para definir comno nos vamos a autenticar en las diferentes rutas
  y así definir de donde saldrá el usuario que vamos a usar de ahí en adelante

  BASIC STRATEGY
    Lo primero es crear un carpeta auth/strategies

    Aquí passport tiene que usar alguna estrategia conocida y para eso usaremos
      const { BasicStrategy } = require('passport-htttp');
      que nos permitirá hacer una validación sencilla

      Tambien utilizaremos nuestro userService, que es lo que nos conecta con la base 
      de datos
        const UserService = require('../../services/users');
      
      usamos passport y la estrategia
        passport.use(
          new BasicStrategy( async (email, password, callback) => {

          })
        )
      los dos primeros parametros llegarán del req, el tercero será quien 
      envia la respuesta de la autenticación

      Hacemos la petición a DB y comprovamos si existe un usuario
        const user ¿ await userService.getUser({ email });

        if(!user){
          return callback(boom.unauthorized(), false)
        }
      tambien varificamos si la contraseña en la misma de la base de datos
      usando bcrypt
        if(!(await bcrypt.compare(password, user.password))) {
          return callback(boom.unauthorized(), false);
        }
      Luego eliminamos el password del user para que ya 
      no sea visible
        delete user.password

      si pasamos nuestras dos validaciones, llamamos al callback
      con un error nulo y el user que nos devolvió la DB
        return callback(null, user)

      Ya con esto tenemos implementada nuestra autenticación y así
      podemos usarla como middleware en nuestras rutas
      para atravez del email y el password de un usuario 
      lograr autenticarlo

  JWT STRATEGY
    En esta recibimos un JWT y a partir del toeken decodificado buscaremos el usuario

    Lo primero es asegurarnos que en nuestro .env este definido el 
    AUTH_JWT_SECRET= con un codigo de base 256 bit

    lo agregamos a nuestro archivo config
      authJwtSecret: process.env.AUTH_JWT_SECRET,
    
    Creamos un nuevo archivo en nuestras Estrategias
      auth/strategies/jwt.js
    
    reqerimos passport-jwt para implementar esa estrategia
      const { Strategy, ExtractJwt } = require('passport-jwt');
    
    Definimos nuestra nueva estrategia
      passport.use(
        new Strategy({
          secretOrKey: config.authJwtSecret,
          jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken()
        })
      )
      secretOrKey: es neustro secret que esta en base 256 bit y esta en .env
      jwtFromRequest: de donde va a salir nuestro JWT, en este caso saldrá del headers
      de la petición.

      Así que cuando queramos autenticar, tendremos que enviar el JWT en el header
      como un Bearer Token.

      En nuestra función callback, osea el segundo parametro de passport.use(,este)
      vamos a recibir nuestro token ya decodificado y un callback que dará la respues final
      si funciono ese token o nel 
        async (tokenPayload, callback) => {
         
       }
      
      Hacemos la petición desde nuestra base de datos usando el tokenPayload
      const user = await usersService.getUsers({ email: tokenPayload.email })

      si esto si trae el usuario pues ya estamso autorizados sin ncesidad de verificar el 
      password pues ya usamos nuestro secret 
        if(!user) {
          return callback(boom.unauthorized(), false);
        }
      Eliminamos la contraseña por seguridad
        delete user.password
      y en el callback devolvemos el user con sus  scopes
        callback(null, {...user, scopes: tokenPayload.scopes});
    
Implementación de nuestro Sign-in
  Lo primero para implementar nuestra ruta de sign in
  tenemos que crear un servicio llamado apiKeys.js
  lo que nos va a pertimir es que atraves de un API-Key-token podamos obtener los scopes
  y es requerido a la hora de hacer sign in, para poder firmar nuestros
  JWT con lso scopes correspondientes de acuerdo al APi-token ue nosotros enviemos.

  nuestro servicio se va a conectar a la colección que tiene todos nuestros permisos
  obteniendo así los permisos correspondientes alñ token que le enviemos.

  Recordemos que estas dos clases de permisos ya los creamos con seedApiKeys.js

  Ahora que ya tenemos neustro servicio para obetener neustro permisos vamos a crear 
  nuestra ruta para hacer autenticación
    Nuestra estrategia basica va a user el servicio del apiKeys
    para eso creamos una nueva ruta con un post
      function authAPi(app) {
        const router = express.Router();
        app.use('/api/auth', router);

        const apiKeysService = new ApiKeysService()

        router.post('/sign-in', async(req, res, next)=>{
          const { apiKeyToken } = req.body;
        })
      }
      el apiKeyToken que viene el cuerpo de la petición será el token 
      que le pasaremos al sign in para determinar que clase de permisos tiene
      que firmar en el JWT que vamos a devolver.
        if(!apiKeyToken) {
          next(boom.unauthorized(' apiKeytoken is required'));
        }
        si no nos llega el token el bodu pues error primero

      cuando ya tenemos el apiKeyToken ahora si usamos passport para usar 
      la estrategia de autenticación





     
  